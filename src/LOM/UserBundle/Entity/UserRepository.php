<?php

/*
 * Copyright (C) 2014 mjoyce
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

namespace LOM\UserBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Security\Core\User\UserInterface;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository {

    /**
     * Find a user by username. Necessary for the login system.
     *
     * @param string $username
     *
     * @return User
     *
     * @throws UsernameNotFoundException
     */
    public function loadUserByUsername($username) {
        $q = $this->createQueryBuilder('u')
                ->where('u.username = :username')
                ->setParameter('username', $username)
                ->getQuery();
        $user = null;
        try {
            $user = $q->getSingleResult();
        } catch (Exception $ex) {
            $message = sprintf(
                    'Unable to find an active user identified by "%s".', $username
            );
            throw new UsernameNotFoundException($message, 0, $ex);
        }
        return $user;
    }

    /**
     * Refresh/reload a user from the database
     *
     * @param \Symfony\Component\Security\Core\User\UserInterface $user
     *
     * @return User
     *
     * @throws UnsupportedUserException
     */
    public function refreshUser(UserInterface $user) {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(sprintf('Instances of "%s" are not supported.', $class));
        }
        return $this->find($user->getId());
    }

    /**
     * Check if this repository supports storing/fetching another class.
     *
     * @param string $class
     *
     * @return boolean
     */
    public function supportsClass($class) {
        return $this->getEntityName() === $class || is_subclass_of($class, $this->getEntityName());
    }

}
